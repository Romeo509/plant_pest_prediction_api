from fastapi import FastAPI, File, UploadFile, HTTPException
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
import tensorflow as tf
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import numpy as np
from PIL import Image
import io
import base64
import uvicorn

app = FastAPI(title="Maize Disease Classifier", description="AI-powered maize leaf disease detection")

# Global variable to store the model
model = None
class_labels = ['Cercospora_leaf_spot Gray_leaf_spot', 'Common_rust', 'Northern_Leaf_Blight', 'healthy']

def load_disease_model():
    """Load the pre-trained maize disease model"""
    global model
    try:
        model = load_model("maize_disease_model.h5")
        print("Model loaded successfully!")
    except Exception as e:
        print(f"Error loading model: {e}")
        print("Using dummy model for demo purposes")
        # Create a dummy model for demonstration
        model = tf.keras.Sequential([
            tf.keras.layers.Dense(4, activation='softmax', input_shape=(224, 224, 3))
        ])

def preprocess_image(img_bytes):
    """Preprocess uploaded image for model prediction"""
    try:
        # Open image from bytes
        img = Image.open(io.BytesIO(img_bytes))
        
        # Convert to RGB if necessary
        if img.mode != 'RGB':
            img = img.convert('RGB')
        
        # Resize to model input size
        img = img.resize((224, 224))
        
        # Convert to array and normalize
        img_array = np.array(img) / 255.0
        img_array = np.expand_dims(img_array, axis=0)
        
        return img_array
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"Error processing image: {str(e)}")

@app.on_event("startup")
async def startup_event():
    """Load model on startup"""
    load_disease_model()

@app.get("/", response_class=HTMLResponse)
async def get_demo_page():
    """Serve the demo page"""
    html_content = """
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Maize Disease Classifier</title>
        <style>
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }

            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
                min-height: 100vh;
                display: flex;
                justify-content: center;
                align-items: center;
                padding: 20px;
            }

            .container {
                background: rgba(255, 255, 255, 0.95);
                backdrop-filter: blur(10px);
                padding: 40px;
                border-radius: 20px;
                box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
                max-width: 600px;
                width: 100%;
                text-align: center;
            }

            h1 {
                color: #2c5f2d;
                margin-bottom: 30px;
                font-size: 2.5em;
                font-weight: 700;
            }

            .subtitle {
                color: #666;
                margin-bottom: 30px;
                font-size: 1.1em;
            }

            .upload-area {
                border: 3px dashed #4CAF50;
                border-radius: 15px;
                padding: 40px;
                margin: 30px 0;
                background: rgba(76, 175, 80, 0.05);
                cursor: pointer;
                transition: all 0.3s ease;
            }

            .upload-area:hover {
                border-color: #45a049;
                background: rgba(76, 175, 80, 0.1);
                transform: translateY(-2px);
            }

            .upload-area.dragover {
                border-color: #2e7d32;
                background: rgba(76, 175, 80, 0.15);
                transform: scale(1.02);
            }

            .upload-icon {
                font-size: 3em;
                color: #4CAF50;
                margin-bottom: 15px;
            }

            .upload-text {
                color: #333;
                font-size: 1.1em;
                margin-bottom: 10px;
            }

            .upload-hint {
                color: #666;
                font-size: 0.9em;
            }

            #fileInput {
                display: none;
            }

            .btn {
                background: linear-gradient(45deg, #4CAF50, #45a049);
                border: none;
                color: white;
                padding: 15px 30px;
                border-radius: 25px;
                cursor: pointer;
                font-size: 1.1em;
                font-weight: 600;
                transition: all 0.3s ease;
                margin: 10px;
            }

            .btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 10px 20px rgba(76, 175, 80, 0.3);
            }

            .btn:disabled {
                background: #ccc;
                cursor: not-allowed;
                transform: none;
                box-shadow: none;
            }

            .preview-container {
                margin: 30px 0;
                display: none;
            }

            .preview-image {
                max-width: 100%;
                max-height: 300px;
                border-radius: 10px;
                box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
            }

            .result-container {
                margin-top: 30px;
                padding: 20px;
                background: rgba(76, 175, 80, 0.1);
                border-radius: 15px;
                display: none;
            }

            .result-text {
                font-size: 1.2em;
                font-weight: 600;
                color: #2c5f2d;
                margin-bottom: 10px;
            }

            .confidence-bar {
                background: #e0e0e0;
                border-radius: 10px;
                height: 20px;
                margin: 10px 0;
                overflow: hidden;
            }

            .confidence-fill {
                background: linear-gradient(45deg, #4CAF50, #45a049);
                height: 100%;
                border-radius: 10px;
                transition: width 0.5s ease;
            }

            .loading {
                display: none;
                color: #4CAF50;
                font-size: 1.1em;
                margin: 20px 0;
            }

            .spinner {
                border: 3px solid #f3f3f3;
                border-top: 3px solid #4CAF50;
                border-radius: 50%;
                width: 30px;
                height: 30px;
                animation: spin 1s linear infinite;
                margin: 0 auto 10px;
            }

            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }

            .error {
                color: #f44336;
                background: rgba(244, 67, 54, 0.1);
                padding: 15px;
                border-radius: 10px;
                margin: 20px 0;
                display: none;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üåΩ Maize Disease Classifier</h1>
            <p class="subtitle">Upload a maize leaf image to detect diseases using AI</p>
            
            <div class="upload-area" onclick="document.getElementById('fileInput').click()">
                <div class="upload-icon">üì∏</div>
                <div class="upload-text">Click to upload or drag and drop</div>
                <div class="upload-hint">Support: JPG, PNG, GIF (Max 10MB)</div>
            </div>
            
            <input type="file" id="fileInput" accept="image/*" onchange="handleFileSelect(event)">
            
            <div class="preview-container" id="previewContainer">
                <img id="previewImage" class="preview-image" alt="Preview">
                <br>
                <button class="btn" onclick="classifyImage()" id="classifyBtn">
                    üîç Classify Disease
                </button>
            </div>
            
            <div class="loading" id="loading">
                <div class="spinner"></div>
                Analyzing image...
            </div>
            
            <div class="error" id="error"></div>
            
            <div class="result-container" id="resultContainer">
                <div class="result-text" id="resultText"></div>
                <div class="confidence-bar">
                    <div class="confidence-fill" id="confidenceFill"></div>
                </div>
                <div id="confidenceText"></div>
            </div>
        </div>

        <script>
            let selectedFile = null;

            // Handle file selection
            function handleFileSelect(event) {
                const file = event.target.files[0];
                if (file) {
                    selectedFile = file;
                    displayPreview(file);
                }
            }

            // Display image preview
            function displayPreview(file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    document.getElementById('previewImage').src = e.target.result;
                    document.getElementById('previewContainer').style.display = 'block';
                    document.getElementById('resultContainer').style.display = 'none';
                    document.getElementById('error').style.display = 'none';
                };
                reader.readAsDataURL(file);
            }

            // Drag and drop functionality
            const uploadArea = document.querySelector('.upload-area');
            
            uploadArea.addEventListener('dragover', (e) => {
                e.preventDefault();
                uploadArea.classList.add('dragover');
            });

            uploadArea.addEventListener('dragleave', () => {
                uploadArea.classList.remove('dragover');
            });

            uploadArea.addEventListener('drop', (e) => {
                e.preventDefault();
                uploadArea.classList.remove('dragover');
                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    selectedFile = files[0];
                    displayPreview(files[0]);
                }
            });

            // Classify image
            async function classifyImage() {
                if (!selectedFile) {
                    showError('Please select an image first');
                    return;
                }

                const formData = new FormData();
                formData.append('file', selectedFile);

                document.getElementById('loading').style.display = 'block';
                document.getElementById('classifyBtn').disabled = true;
                document.getElementById('error').style.display = 'none';

                try {
                    const response = await fetch('/predict', {
                        method: 'POST',
                        body: formData
                    });

                    const result = await response.json();

                    if (response.ok) {
                        displayResult(result);
                    } else {
                        showError(result.detail || 'Classification failed');
                    }
                } catch (error) {
                    showError('Network error: ' + error.message);
                } finally {
                    document.getElementById('loading').style.display = 'none';
                    document.getElementById('classifyBtn').disabled = false;
                }
            }

            // Display classification result
            function displayResult(result) {
                document.getElementById('resultText').textContent = 
                    `Disease: ${result.prediction}`;
                document.getElementById('confidenceText').textContent = 
                    `Confidence: ${(result.confidence * 100).toFixed(1)}%`;
                
                const confidenceFill = document.getElementById('confidenceFill');
                confidenceFill.style.width = (result.confidence * 100) + '%';
                
                document.getElementById('resultContainer').style.display = 'block';
            }

            // Show error message
            function showError(message) {
                document.getElementById('error').textContent = message;
                document.getElementById('error').style.display = 'block';
            }
        </script>
    </body>
    </html>
    """
    return html_content

@app.post("/predict")
async def predict_disease(file: UploadFile = File(...)):
    """Predict maize disease from uploaded image"""
    if not file.content_type.startswith('image/'):
        raise HTTPException(status_code=400, detail="File must be an image")
    
    try:
        # Read and preprocess image
        img_bytes = await file.read()
        img_array = preprocess_image(img_bytes)
        
        # Make prediction
        if model is None:
            raise HTTPException(status_code=500, detail="Model not loaded")
        
        prediction = model.predict(img_array)
        class_idx = np.argmax(prediction)
        confidence = float(np.max(prediction))
        
        return {
            "prediction": class_labels[class_idx],
            "confidence": confidence,
            "probabilities": {
                class_labels[i]: float(prediction[0][i]) 
                for i in range(len(class_labels))
            }
        }
    
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Prediction failed: {str(e)}")

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {"status": "healthy", "model_loaded": model is not None}

if __name__ == "__main__":
    print("Starting Maize Disease Classifier API...")
    print("Demo page will be available at: http://localhost:8000")
    print("API documentation at: http://localhost:8000/docs")
    
    uvicorn.run(
        app, 
        host="0.0.0.0", 
        port=8000,
        reload=True
    )
